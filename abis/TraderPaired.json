{
  "fileName": "TraderPaired.sol",
  "contractName": "TraderPaired",
  "source": "// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/upgrades/contracts/Initializable.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./PairedInvestments.sol\";\n\ncontract TraderPaired is Initializable, Ownable, Pausable {\n\tusing SafeMath for uint256;\n\n    address constant ETHER = address(0); // allows storage of ether in blank address in token mapping\n    address public feeAccount; // account that will receive fees\n\n    mapping(address => _Trader) public traders;\n    // mapping(address => _Investor) public investors;\n\n    // address public pairedInvestments;\n\n    // mapping(address => bool) public tokens;\n\n    // mapping(address => mapping(uint256 => uint256)) public traderInvestments;\n    // mapping(address => mapping(uint256 => uint256)) public investorInvestments;\n    // mapping(address => mapping(address => _Allocation)) public allocations;\n\n    // mapping(address => mapping(address => uint256)) public balances; // mapping of token balances to addresses\n\n    event Trader(address indexed trader, uint256 date);\n    // event Investor(address indexed investor, uint256 date);\n    // event Allocate(address indexed trader, address token, uint256 amount);\n    // event Withdraw(address indexed token, address indexed user, uint256 amount, uint256 balance, uint256 date);\n    // event Invest(uint256 id, address indexed investor, address indexed trader, address indexed token, uint256 amount);\n    // event RequestExit(address indexed trader, uint256 investmentId, uint256 date, uint256 value);\n    // event RejectExit(address indexed trader, uint256 investmentId, uint256 value, uint256 date);\n    // event ApproveExit(address indexed trader, uint256 investmentId, uint256 date);\n\n    struct _Trader {\n        address user;\n        uint256 investmentCount;\n    }\n\n    struct _Allocation {\n        uint256 total;\n        uint256 invested;\n    }\n\n    struct _Investor {\n        address user;\n        uint256 investmentCount;\n    }\n\n    function initialize(\n            address _feeAccount\n            ) public initializer {\n        Ownable.initialize(msg.sender);\n        Pausable.initialize(msg.sender);\n        feeAccount = _feeAccount;\n    }\n\n    // function setPairedInvestments(\n    //         address _pairedInvestments\n    //         ) public onlyOwner {\n    //     pairedInvestments = _pairedInvestments;\n    // }\n\n    // reverts if ether is sent directly\n    function () external {\n        revert();\n    }\n\n    // function setToken(address _token, bool _valid) external onlyOwner {\n    //     tokens[_token] = _valid;\n    // }\n\n    function joinAsTrader() external whenNotPaused {\n        require(traders[msg.sender].user == address(0));\n        // require(investors[msg.sender].user == address(0));\n\n        traders[msg.sender] = _Trader({\n            user: msg.sender, \n            investmentCount: 0\n        });\n\n        emit Trader(msg.sender, now);\n    }\n\n    // function joinAsInvestor() external whenNotPaused {\n    //     require(traders[msg.sender].user == address(0));\n    //     require(investors[msg.sender].user == address(0));\n\n    //     investors[msg.sender] = _Investor({\n    //             user: msg.sender,\n    //             investmentCount: 0\n    //         });\n\n    //     emit Investor(msg.sender, now);\n    // }\n\n    // function allocate(address _token, uint256 _amount) external whenNotPaused {\n    //     require(tokens[_token]);\n    //     _Trader memory _trader = traders[msg.sender];\n    //     require(_trader.user == msg.sender);\n\n    //     allocations[msg.sender][_token].total = _amount;\n\n    //     emit Allocate(msg.sender, _token, _amount);\n    // }\n\n    // //\n    // //    Investor invests\n    // //\n    // function investEther(address _traderAddress) external payable whenNotPaused {\n    //     _invest(_traderAddress, ETHER, msg.value);\n    // }\n\n    // //\n    // //    Investor invests\n    // //\n    // function investToken(address _traderAddress, address _token, uint256 _amount) external whenNotPaused {\n    //     require(tokens[_token]);\n    //     require(IERC20(_token).transferFrom(msg.sender, address(this), _amount));\n    //     _invest(_traderAddress, _token, _amount);\n    // }\n\n    // function _invest(address _traderAddress, address _token, uint256 _amount) internal {\n    //     _Investor storage _investor = investors[msg.sender];\n    //     require(_investor.user == msg.sender);\n\n    //     _Trader storage _trader = traders[_traderAddress];\n    //     require(_trader.user == _traderAddress);\n\n    //     _Allocation storage allocation = allocations[_trader.user][_token];\n\n    //     // falls within trader allocations\n    //     require(allocation.total - allocation.invested >= _amount);\n    //     allocation.invested = allocation.invested.add(_amount);\n\n    //     uint256 investmentCount = PairedInvestments(pairedInvestments).invest(\n    //         _traderAddress, \n    //         msg.sender, \n    //         _token, \n    //         _amount\n    //     );\n\n    //     _trader.investmentCount = _trader.investmentCount.add(1);\n    //     traderInvestments[_trader.user][_trader.investmentCount] = investmentCount;\n\n    //     _investor.investmentCount = _investor.investmentCount.add(1);\n    //     investorInvestments[_investor.user][_investor.investmentCount] = investmentCount;\n\n    //     emit Invest(\n    //         investmentCount,\n    //         msg.sender,\n    //         _trader.user,\n    //         _token,\n    //         _amount\n    //     );\n    // }\n\n    // //\n    // //    Investor exits an investment\n    // //\n    // function requestExit(address _traderAddress, uint256 _investmentId, address _token, uint256 _value) external whenNotPaused {\n    //     require(tokens[_token]);\n    //     _Trader memory _trader = traders[_traderAddress];\n    //     require(_trader.user == _traderAddress);\n \n    //     address[2] memory _addressArgs = [\n    //         _traderAddress, \n    //         msg.sender];\n\n    //     uint256[5] memory _uint256Args = [\n    //         _investmentId, \n    //         _value,\n    //         balances[_traderAddress][_token],\n    //         balances[msg.sender][_token],\n    //         balances[feeAccount][_token]];\n\n    //     uint256[4] memory _result = PairedInvestments(pairedInvestments).requestExit(_addressArgs, _uint256Args);\n\n    //     balances[_traderAddress][_token] = _result[0];\n    //     balances[msg.sender][_token] = _result[1];\n    //     balances[feeAccount][_token] = _result[2];\n\n    //     emit RequestExit(\n    //         _traderAddress,\n    //         _investmentId, \n    //         _result[3], \n    //         _value\n    //     );\n    // }\n\n    // //\n    // //    Trader rejects the exit request. \n    // //    Perhaps the investor made a false profit claim. \n    // //    This will now enter a dispute workflow managed on the client\n    // //\n    // function rejectExit(uint256 _investmentId, uint256 _value) external whenNotPaused {\n    //     PairedInvestments(pairedInvestments).rejectExit(\n    //         msg.sender,\n    //         _investmentId\n    //     );\n\n    //     emit RejectExit(\n    //         msg.sender, \n    //         _investmentId,\n    //         _value,\n    //         now\n    //     );\n    // }\n\n    // //\n    // //    Trader approves the exit by paying the nett profit back to the contract, under the name of the investor\n    // //\n    // function approveExitEther(address _investorAddress, uint256 _investmentId) external payable whenNotPaused {\n    //     _approveExit(_investorAddress, _investmentId, ETHER, msg.value);\n    // }\n\n    // //\n    // //    Trader approves the exit by paying the nett profit back to the contract, under the name of the investor\n    // //\n    // function approveExitToken(address _investorAddress, uint256 _investmentId, address _token, uint256 _amount) external whenNotPaused {\n    //     require(IERC20(_token).transferFrom(msg.sender, address(this), _amount));\n    //     _approveExit(_investorAddress, _investmentId, _token, _amount);\n    // }\n\n    // function _approveExit(address _investorAddress, uint256 _investmentId, address _token, uint256 _amount) internal {\n    //     _Trader memory _trader = traders[msg.sender];\n    //     _Investor memory _investor = investors[_investorAddress];\n    //     require(_trader.user == msg.sender);\n    //     require(_investor.user == _investorAddress);\n\n    //     address[2] memory _addressArgs = [\n    //         msg.sender,\n    //         _investorAddress];\n\n    //     uint256[5] memory _uint256Args = [\n    //         _investmentId, \n    //         _amount,\n    //         balances[msg.sender][_token],\n    //         balances[_investorAddress][_token],\n    //         balances[feeAccount][_token]];\n\n    //     uint256[4] memory _result = PairedInvestments(pairedInvestments).approveExit(_addressArgs, _uint256Args);\n\n    //     allocations[msg.sender][_token].invested = allocations[msg.sender][_token].invested.sub(_result[3]);\n        \n    //     balances[msg.sender][_token] = _result[0];\n    //     balances[_investorAddress][_token] = _result[1];\n    //     balances[feeAccount][_token] = _result[2];\n\n    //     emit ApproveExit(\n    //         msg.sender,\n    //         _investmentId,\n    //         now\n    //     );\n    // }\n\n    // //\n    // //    Investor withdraws previously deposited ether funds, perhaps including profits (and losses)\n    // //\n    // function withdrawEther(uint256 _amount) external whenNotPaused {\n    //     uint256 balance = balances[msg.sender][ETHER];\n    //     balances[msg.sender][ETHER] = balance.sub(_amount);\n    //     msg.sender.transfer(_amount);\n    //     emit Withdraw(ETHER, msg.sender, _amount, balances[msg.sender][ETHER], now);\n    // }\n\n    // //\n    // //    Investor withdraws previously deposited token funds, perhaps including profits (and losses)\n    // //\n    // function withdrawToken(address _token, uint256 _amount) external whenNotPaused {\n    //     require(_token != ETHER);\n    //     uint256 balance = balances[msg.sender][_token];\n    //     // require(IERC20(_token).transferFrom(address(this), msg.sender, _amount));\n    //     require(IERC20(_token).transfer(msg.sender, _amount));\n    //     balances[msg.sender][_token] = balance.sub(_amount);\n    //     emit Withdraw(_token, msg.sender, _amount, balances[msg.sender][_token], now);\n    // }\n\n}\n",
  "sourcePath": "contracts/TraderPaired.sol",
  "sourceMap": "502:10119:9:-;;;;;;;;;",
  "deployedSourceMap": "502:10119:9:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;502:10119:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2751:8;;;2893:327;;;:::i;:::-;;2040:117:3;;;:::i;643:107:2:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;643:107:2;-1:-1:-1;;;;;643:107:2;;:::i;:::-;;;;;;;;;;;;;;;;;;1278:76:3;;;:::i;698:25:9:-;;;:::i;:::-;;;;-1:-1:-1;;;;;698:25:9;;;;;;;;;;;;;;852:77:2;;;:::i;1746:137:5:-;;;:::i;756:90:2:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;756:90:2;-1:-1:-1;;;;;756:90:2;;:::i;1835:115:3:-;;;:::i;959:77:5:-;;;:::i;1310:92::-;;;:::i;764:42:9:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;764:42:9;-1:-1:-1;;;;;764:42:9;;:::i;:::-;;;;-1:-1:-1;;;;;764:42:9;;;;;;;;;;;;;;;;;;;;;2288:208;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2288:208:9;-1:-1:-1;;;;;2288:208:9;;:::i;2032:107:5:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2032:107:5;-1:-1:-1;;;;;2032:107:5;;:::i;2893:327:9:-;1507:7:3;;;;1506:8;1498:37;;;;;-1:-1:-1;;;1498:37:3;;;;;;;;;;;;-1:-1:-1;;;1498:37:3;;;;;;;;;;;;;;;2966:10:9;2994:1;2958:19;;;:7;:19;;;;;:24;-1:-1:-1;;;;;2958:24:9;:38;2950:47;;;;;;3092:82;;;;;;;;3120:10;3092:82;;;-1:-1:-1;3092:82:9;;;;;;;3070:19;;;:7;:19;;;;;;:104;;;;-1:-1:-1;;;;;;3070:104:9;-1:-1:-1;;;;;3070:104:9;;;;;;;;-1:-1:-1;3070:104:9;;;;;;;3190:23;;3209:3;3190:23;;;;3120:10;;3190:23;;;;;;;;;2893:327::o;2040:117:3:-;544:22:2;553:12;:10;:12::i;:::-;544:8;:22::i;:::-;536:83;;;;-1:-1:-1;;;536:83:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1698:7:3;;;;1690:40;;;;;-1:-1:-1;;;1690:40:3;;;;;;;;;;;;-1:-1:-1;;;1690:40:3;;;;;;;;;;;;;;;2098:7;:15;;-1:-1:-1;;2098:15:3;;;2128:22;2137:12;:10;:12::i;:::-;2128:22;;;-1:-1:-1;;;;;2128:22:3;;;;;;;;;;;;;;2040:117::o;643:107:2:-;699:4;722:21;:8;735:7;722:21;:12;:21;:::i;:::-;715:28;643:107;-1:-1:-1;;643:107:2:o;1278:76:3:-;1340:7;;;;1278:76;:::o;698:25:9:-;;;-1:-1:-1;;;;;698:25:9;;:::o;852:77:2:-;895:27;909:12;:10;:12::i;:::-;895:13;:27::i;:::-;852:77::o;1746:137:5:-;1163:9;:7;:9::i;:::-;1155:54;;;;;-1:-1:-1;;;1155:54:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1828:6;;1807:40;;1844:1;;-1:-1:-1;;;;;1828:6:5;;1807:40;;1844:1;;1807:40;1857:6;:19;;-1:-1:-1;;;;;;1857:19:5;;;1746:137::o;756:90:2:-;544:22;553:12;:10;:12::i;544:22::-;536:83;;;;-1:-1:-1;;;536:83:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;820:19;831:7;820:10;:19::i;:::-;756:90;:::o;1835:115:3:-;544:22:2;553:12;:10;:12::i;544:22::-;536:83;;;;-1:-1:-1;;;536:83:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1507:7:3;;;;1506:8;1498:37;;;;;-1:-1:-1;;;1498:37:3;;;;;;;;;;;;-1:-1:-1;;;1498:37:3;;;;;;;;;;;;;;;1894:7;:14;;-1:-1:-1;;1894:14:3;1904:4;1894:14;;;1923:20;1930:12;:10;:12::i;959:77:5:-;1023:6;;-1:-1:-1;;;;;1023:6:5;959:77;:::o;1310:92::-;1389:6;;1350:4;;-1:-1:-1;;;;;1389:6:5;1373:12;:10;:12::i;:::-;-1:-1:-1;;;;;1373:22:5;;1366:29;;1310:92;:::o;764:42:9:-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;764:42:9;;;;;:::o;2288:208::-;1024:12:7;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:7;;;;1059:12;1024:47;1016:106;;;;-1:-1:-1;;;1016:106:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:7;;;;;1225:18;1213:4;1225:18;;;1170:80;2384:30:9;2403:10;2384:18;:30::i;:::-;2424:31;2444:10;2424:19;:31::i;:::-;2465:10;:24;;-1:-1:-1;;;;;;2465:24:9;-1:-1:-1;;;;;2465:24:9;;;;;1264:55:7;;;;1307:5;1292:20;;-1:-1:-1;;1292:20:7;;;1264:55;2288:208:9;;:::o;2032:107:5:-;1163:9;:7;:9::i;:::-;1155:54;;;;;-1:-1:-1;;;1155:54:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2104:28;2123:8;2104:18;:28::i;867:96:0:-;946:10;867:96;:::o;779:200:1:-;851:4;-1:-1:-1;;;;;875:21:1;;867:68;;;;-1:-1:-1;;;867:68:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;952:20:1;:11;:20;;;;;;;;;;;;;;;779:200::o;1060:127:2:-;1119:24;:8;1135:7;1119:24;:15;:24;:::i;:::-;1158:22;;-1:-1:-1;;;;;1158:22:2;;;;;;;;1060:127;:::o;935:119::-;991:21;:8;1004:7;991:21;:12;:21;:::i;:::-;1027:20;;-1:-1:-1;;;;;1027:20:2;;;;;;;;935:119;:::o;1409:498:7:-;1820:4;1864:17;1895:7;1409:498;:::o;741:142:5:-;1024:12:7;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:7;;;;1059:12;1024:47;1016:106;;;;-1:-1:-1;;;1016:106:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:7;;;;;1225:18;1213:4;1225:18;;;1170:80;806:6:5;:15;;-1:-1:-1;;;;;;806:15:5;-1:-1:-1;;;;;806:15:5;;;;;;;;;;;836:40;;869:6;;;-1:-1:-1;;836:40:5;;-1:-1:-1;;836:40:5;1268:14:7;1264:55;;;1307:5;1292:20;;-1:-1:-1;;1292:20:7;;;741:142:5;;:::o;1056:127:3:-;1024:12:7;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:7;;;;1059:12;1024:47;1016:106;;;;-1:-1:-1;;;1016:106:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:7;;;;;1225:18;1213:4;1225:18;;;1170:80;1121:29:3;1143:6;1121:21;:29::i;:::-;1161:7;:15;;-1:-1:-1;;1161:15:3;;;1264:55:7;;;;1307:5;1292:20;;-1:-1:-1;;1292:20:7;;;1056:127:3;;:::o;2240:225:5:-;-1:-1:-1;;;;;2313:22:5;;2305:73;;;;-1:-1:-1;;;2305:73:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2414:6;;2393:38;;-1:-1:-1;;;;;2393:38:5;;;;2414:6;;2393:38;;2414:6;;2393:38;2441:6;:17;;-1:-1:-1;;;;;;2441:17:5;-1:-1:-1;;;;;2441:17:5;;;;;;;;;;2240:225::o;510:180:1:-;589:18;593:4;599:7;589:3;:18::i;:::-;581:64;;;;-1:-1:-1;;;581:64:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;655:20:1;678:5;655:20;;;;;;;;;;;:28;;-1:-1:-1;;655:28:1;;;510:180::o;260:175::-;337:18;341:4;347:7;337:3;:18::i;:::-;336:19;328:63;;;;;-1:-1:-1;;;328:63:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;401:20:1;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;401:27:1;424:4;401:27;;;260:175::o;361:137:2:-;1024:12:7;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:7;;;;1059:12;1024:47;1016:106;;;;-1:-1:-1;;;1016:106:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:7;;;;;1225:18;1213:4;1225:18;;;1170:80;431:16:2;440:6;431:8;:16::i;:::-;426:66;;463:18;474:6;463:10;:18::i;:::-;1268:14:7;1264:55;;;1307:5;1292:20;;-1:-1:-1;;1292:20:7;;;361:137:2;;:::o",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "Trader",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAccount",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "joinAsTrader",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "traders",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "investmentCount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "ast": {
    "absolutePath": "contracts/TraderPaired.sol",
    "exportedSymbols": {
      "TraderPaired": [
        1708
      ]
    },
    "id": 1709,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1592,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".21",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "41:32:9"
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol",
        "id": 1593,
        "nodeType": "ImportDirective",
        "scope": 1709,
        "sourceUnit": 526,
        "src": "75:78:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 1594,
        "nodeType": "ImportDirective",
        "scope": 1709,
        "sourceUnit": 788,
        "src": "154:60:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol",
        "id": 1595,
        "nodeType": "ImportDirective",
        "scope": 1709,
        "sourceUnit": 650,
        "src": "215:82:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol",
        "id": 1596,
        "nodeType": "ImportDirective",
        "scope": 1709,
        "sourceUnit": 339,
        "src": "298:83:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol",
        "id": 1597,
        "nodeType": "ImportDirective",
        "scope": 1709,
        "sourceUnit": 719,
        "src": "382:83:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/PairedInvestments.sol",
        "file": "./PairedInvestments.sol",
        "id": 1598,
        "nodeType": "ImportDirective",
        "scope": 1709,
        "sourceUnit": 1591,
        "src": "467:33:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1599,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 787,
              "src": "527:13:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$787",
                "typeString": "contract Initializable"
              }
            },
            "id": 1600,
            "nodeType": "InheritanceSpecifier",
            "src": "527:13:9"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1601,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 649,
              "src": "542:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$649",
                "typeString": "contract Ownable"
              }
            },
            "id": 1602,
            "nodeType": "InheritanceSpecifier",
            "src": "542:7:9"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1603,
              "name": "Pausable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 338,
              "src": "551:8:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Pausable_$338",
                "typeString": "contract Pausable"
              }
            },
            "id": 1604,
            "nodeType": "InheritanceSpecifier",
            "src": "551:8:9"
          }
        ],
        "contractDependencies": [
          29,
          233,
          338,
          649,
          787
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1708,
        "linearizedBaseContracts": [
          1708,
          338,
          233,
          649,
          29,
          787
        ],
        "name": "TraderPaired",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 1607,
            "libraryName": {
              "contractScope": null,
              "id": 1605,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 525,
              "src": "569:8:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$525",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "563:27:9",
            "typeName": {
              "id": 1606,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "582:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": true,
            "id": 1612,
            "name": "ETHER",
            "nodeType": "VariableDeclaration",
            "scope": 1708,
            "src": "596:35:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1608,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "596:7:9",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "30",
                  "id": 1610,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "629:1:9",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }
                ],
                "id": 1609,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "621:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_$",
                  "typeString": "type(address)"
                },
                "typeName": "address"
              },
              "id": 1611,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "621:10:9",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1614,
            "name": "feeAccount",
            "nodeType": "VariableDeclaration",
            "scope": 1708,
            "src": "698:25:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1613,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "698:7:9",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1618,
            "name": "traders",
            "nodeType": "VariableDeclaration",
            "scope": 1708,
            "src": "764:42:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$__Trader_$1629_storage_$",
              "typeString": "mapping(address => struct TraderPaired._Trader)"
            },
            "typeName": {
              "id": 1617,
              "keyType": {
                "id": 1615,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "772:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "764:27:9",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$__Trader_$1629_storage_$",
                "typeString": "mapping(address => struct TraderPaired._Trader)"
              },
              "valueType": {
                "contractScope": null,
                "id": 1616,
                "name": "_Trader",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 1629,
                "src": "783:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$__Trader_$1629_storage_ptr",
                  "typeString": "struct TraderPaired._Trader"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1624,
            "name": "Trader",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1620,
                  "indexed": true,
                  "name": "trader",
                  "nodeType": "VariableDeclaration",
                  "scope": 1624,
                  "src": "1330:22:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1619,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1330:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1622,
                  "indexed": false,
                  "name": "date",
                  "nodeType": "VariableDeclaration",
                  "scope": 1624,
                  "src": "1354:12:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1621,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1354:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1329:38:9"
            },
            "src": "1317:51:9"
          },
          {
            "canonicalName": "TraderPaired._Trader",
            "id": 1629,
            "members": [
              {
                "constant": false,
                "id": 1626,
                "name": "user",
                "nodeType": "VariableDeclaration",
                "scope": 1629,
                "src": "2064:12:9",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1625,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2064:7:9",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1628,
                "name": "investmentCount",
                "nodeType": "VariableDeclaration",
                "scope": 1629,
                "src": "2086:23:9",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1627,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2086:7:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "_Trader",
            "nodeType": "StructDefinition",
            "scope": 1708,
            "src": "2039:77:9",
            "visibility": "public"
          },
          {
            "canonicalName": "TraderPaired._Allocation",
            "id": 1634,
            "members": [
              {
                "constant": false,
                "id": 1631,
                "name": "total",
                "nodeType": "VariableDeclaration",
                "scope": 1634,
                "src": "2151:13:9",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1630,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2151:7:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1633,
                "name": "invested",
                "nodeType": "VariableDeclaration",
                "scope": 1634,
                "src": "2174:16:9",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1632,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2174:7:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "_Allocation",
            "nodeType": "StructDefinition",
            "scope": 1708,
            "src": "2122:75:9",
            "visibility": "public"
          },
          {
            "canonicalName": "TraderPaired._Investor",
            "id": 1639,
            "members": [
              {
                "constant": false,
                "id": 1636,
                "name": "user",
                "nodeType": "VariableDeclaration",
                "scope": 1639,
                "src": "2230:12:9",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1635,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2230:7:9",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1638,
                "name": "investmentCount",
                "nodeType": "VariableDeclaration",
                "scope": 1639,
                "src": "2252:23:9",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1637,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2252:7:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "_Investor",
            "nodeType": "StructDefinition",
            "scope": 1708,
            "src": "2203:79:9",
            "visibility": "public"
          },
          {
            "body": {
              "id": 1664,
              "nodeType": "Block",
              "src": "2374:122:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1649,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1723,
                          "src": "2403:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1650,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2403:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1646,
                        "name": "Ownable",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 649,
                        "src": "2384:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Ownable_$649_$",
                          "typeString": "type(contract Ownable)"
                        }
                      },
                      "id": 1648,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 560,
                      "src": "2384:18:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1651,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2384:30:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1652,
                  "nodeType": "ExpressionStatement",
                  "src": "2384:30:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1656,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1723,
                          "src": "2444:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1657,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2444:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1653,
                        "name": "Pausable",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 338,
                        "src": "2424:8:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Pausable_$338_$",
                          "typeString": "type(contract Pausable)"
                        }
                      },
                      "id": 1655,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 272,
                      "src": "2424:19:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1658,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2424:31:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1659,
                  "nodeType": "ExpressionStatement",
                  "src": "2424:31:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1662,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1660,
                      "name": "feeAccount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1614,
                      "src": "2465:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1661,
                      "name": "_feeAccount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1641,
                      "src": "2478:11:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2465:24:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1663,
                  "nodeType": "ExpressionStatement",
                  "src": "2465:24:9"
                }
              ]
            },
            "documentation": null,
            "id": 1665,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1644,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1643,
                  "name": "initializer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 762,
                  "src": "2362:11:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2362:11:9"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1642,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1641,
                  "name": "_feeAccount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1665,
                  "src": "2321:19:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1640,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2321:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2307:47:9"
            },
            "returnParameters": {
              "id": 1645,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2374:0:9"
            },
            "scope": 1708,
            "src": "2288:208:9",
            "stateMutability": "nonpayable",
            "superFunction": 272,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1671,
              "nodeType": "Block",
              "src": "2741:25:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1668,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1728,
                        1729
                      ],
                      "referencedDeclaration": 1728,
                      "src": "2751:6:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 1669,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2751:8:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1670,
                  "nodeType": "ExpressionStatement",
                  "src": "2751:8:9"
                }
              ]
            },
            "documentation": null,
            "id": 1672,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1666,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2729:2:9"
            },
            "returnParameters": {
              "id": 1667,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2741:0:9"
            },
            "scope": 1708,
            "src": "2720:46:9",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1706,
              "nodeType": "Block",
              "src": "2940:280:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1686,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1678,
                              "name": "traders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1618,
                              "src": "2958:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$__Trader_$1629_storage_$",
                                "typeString": "mapping(address => struct TraderPaired._Trader storage ref)"
                              }
                            },
                            "id": 1681,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1679,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1723,
                                "src": "2966:3:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1680,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2966:10:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2958:19:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$__Trader_$1629_storage",
                              "typeString": "struct TraderPaired._Trader storage ref"
                            }
                          },
                          "id": 1682,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "user",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1626,
                          "src": "2958:24:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1684,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2994:1:9",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1683,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2986:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 1685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2986:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "2958:38:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1677,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1726,
                        1727
                      ],
                      "referencedDeclaration": 1726,
                      "src": "2950:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1687,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2950:47:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1688,
                  "nodeType": "ExpressionStatement",
                  "src": "2950:47:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1698,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1689,
                        "name": "traders",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1618,
                        "src": "3070:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$__Trader_$1629_storage_$",
                          "typeString": "mapping(address => struct TraderPaired._Trader storage ref)"
                        }
                      },
                      "id": 1692,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1690,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1723,
                          "src": "3078:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1691,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "3078:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3070:19:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$__Trader_$1629_storage",
                        "typeString": "struct TraderPaired._Trader storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1694,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1723,
                            "src": "3120:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1695,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "3120:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1696,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3162:1:9",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1693,
                        "name": "_Trader",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1629,
                        "src": "3092:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$__Trader_$1629_storage_ptr_$",
                          "typeString": "type(struct TraderPaired._Trader storage pointer)"
                        }
                      },
                      "id": 1697,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [
                        "user",
                        "investmentCount"
                      ],
                      "nodeType": "FunctionCall",
                      "src": "3092:82:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$__Trader_$1629_memory",
                        "typeString": "struct TraderPaired._Trader memory"
                      }
                    },
                    "src": "3070:104:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$__Trader_$1629_storage",
                      "typeString": "struct TraderPaired._Trader storage ref"
                    }
                  },
                  "id": 1699,
                  "nodeType": "ExpressionStatement",
                  "src": "3070:104:9"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1701,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1723,
                          "src": "3197:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1702,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "3197:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1703,
                        "name": "now",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1725,
                        "src": "3209:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1700,
                      "name": "Trader",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1624,
                      "src": "3190:6:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1704,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3190:23:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1705,
                  "nodeType": "EmitStatement",
                  "src": "3185:28:9"
                }
              ]
            },
            "documentation": null,
            "id": 1707,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1675,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1674,
                  "name": "whenNotPaused",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 290,
                  "src": "2926:13:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2926:13:9"
              }
            ],
            "name": "joinAsTrader",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1673,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2914:2:9"
            },
            "returnParameters": {
              "id": 1676,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2940:0:9"
            },
            "scope": 1708,
            "src": "2893:327:9",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1709,
        "src": "502:10119:9"
      }
    ],
    "src": "41:10581:9"
  },
  "bytecode": "0x6080604052610d8d806100136000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806382dc1ec41161008c5780638f32d59b116100665780638f32d59b146101ad57806392a88fa2146101b5578063c4d66de8146101fe578063f2fde38b14610224576100ea565b806382dc1ec4146101775780638456cb591461019d5780638da5cb5b146101a5576100ea565b80635c975abb116100c85780635c975abb1461013b57806365e17c9d146101435780636ef8d66d14610167578063715018a61461016f576100ea565b80633619fcd1146100ef5780633f4ba83a146100f957806346fbf68e14610101575b600080fd5b6100f761024a565b005b6100f7610335565b6101276004803603602081101561011757600080fd5b50356001600160a01b031661041e565b604080519115158252519081900360200190f35b610127610437565b61014b610440565b604080516001600160a01b039092168252519081900360200190f35b6100f761044f565b6100f7610461565b6100f76004803603602081101561018d57600080fd5b50356001600160a01b0316610504565b6100f7610556565b61014b61061d565b61012761062c565b6101db600480360360208110156101cb57600080fd5b50356001600160a01b0316610652565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6100f76004803603602081101561021457600080fd5b50356001600160a01b0316610677565b6100f76004803603602081101561023a57600080fd5b50356001600160a01b0316610747565b60995460ff1615610295576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b33600090815260cd60205260409020546001600160a01b0316156102b857600080fd5b604080518082018252338082526000602080840182815283835260cd825291859020935184546001600160a01b0319166001600160a01b0390911617845590516001909301929092558251428152925190927f07e6fac70d6958b8515f69f22e83196b98850a5a0891eb226df124f7677bd81592908290030190a2565b6103456103406107a9565b61041e565b6103805760405162461bcd60e51b8152600401808060200182810382526030815260200180610c926030913960400191505060405180910390fd5b60995460ff166103ce576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6099805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6104016107a9565b604080516001600160a01b039092168252519081900360200190a1565b600061043160668363ffffffff6107ad16565b92915050565b60995460ff1690565b60cc546001600160a01b031681565b61045f61045a6107a9565b610814565b565b61046961062c565b6104ba576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b61050f6103406107a9565b61054a5760405162461bcd60e51b8152600401808060200182810382526030815260200180610c926030913960400191505060405180910390fd5b6105538161085c565b50565b6105616103406107a9565b61059c5760405162461bcd60e51b8152600401808060200182810382526030815260200180610c926030913960400191505060405180910390fd5b60995460ff16156105e7576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6099805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586104016107a9565b6033546001600160a01b031690565b6033546000906001600160a01b03166106436107a9565b6001600160a01b031614905090565b60cd60205260009081526040902080546001909101546001600160a01b039091169082565b600054610100900460ff168061069057506106906108a4565b8061069e575060005460ff16155b6106d95760405162461bcd60e51b815260040180806020018281038252602e815260200180610d2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610704576000805460ff1961ff0019909116610100171660011790555b61070d336108aa565b6107163361099b565b60cc80546001600160a01b0319166001600160a01b0384161790558015610743576000805461ff00191690555b5050565b61074f61062c565b6107a0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61055381610a50565b3390565b60006001600160a01b0382166107f45760405162461bcd60e51b8152600401808060200182810382526022815260200180610d096022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61082560668263ffffffff610af116565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61086d60668263ffffffff610b5816565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b303b1590565b600054610100900460ff16806108c357506108c36108a4565b806108d1575060005460ff16155b61090c5760405162461bcd60e51b815260040180806020018281038252602e815260200180610d2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610937576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610743576000805461ff00191690555050565b600054610100900460ff16806109b457506109b46108a4565b806109c2575060005460ff16155b6109fd5760405162461bcd60e51b815260040180806020018281038252602e815260200180610d2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610a28576000805460ff1961ff0019909116610100171660011790555b610a3182610bd9565b6099805460ff191690558015610743576000805461ff00191690555050565b6001600160a01b038116610a955760405162461bcd60e51b8152600401808060200182810382526026815260200180610cc26026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b610afb82826107ad565b610b365760405162461bcd60e51b8152600401808060200182810382526021815260200180610ce86021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b610b6282826107ad565b15610bb4576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600054610100900460ff1680610bf25750610bf26108a4565b80610c00575060005460ff16155b610c3b5760405162461bcd60e51b815260040180806020018281038252602e815260200180610d2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610c66576000805460ff1961ff0019909116610100171660011790555b610c6f8261041e565b610c7c57610c7c8261085c565b8015610743576000805461ff0019169055505056fe506175736572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652050617573657220726f6c654f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a7231582036061d0bb6b0de8f559266e361a7257ce214ad5dd60cc15d31956a906d6ed24364736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806382dc1ec41161008c5780638f32d59b116100665780638f32d59b146101ad57806392a88fa2146101b5578063c4d66de8146101fe578063f2fde38b14610224576100ea565b806382dc1ec4146101775780638456cb591461019d5780638da5cb5b146101a5576100ea565b80635c975abb116100c85780635c975abb1461013b57806365e17c9d146101435780636ef8d66d14610167578063715018a61461016f576100ea565b80633619fcd1146100ef5780633f4ba83a146100f957806346fbf68e14610101575b600080fd5b6100f761024a565b005b6100f7610335565b6101276004803603602081101561011757600080fd5b50356001600160a01b031661041e565b604080519115158252519081900360200190f35b610127610437565b61014b610440565b604080516001600160a01b039092168252519081900360200190f35b6100f761044f565b6100f7610461565b6100f76004803603602081101561018d57600080fd5b50356001600160a01b0316610504565b6100f7610556565b61014b61061d565b61012761062c565b6101db600480360360208110156101cb57600080fd5b50356001600160a01b0316610652565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6100f76004803603602081101561021457600080fd5b50356001600160a01b0316610677565b6100f76004803603602081101561023a57600080fd5b50356001600160a01b0316610747565b60995460ff1615610295576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b33600090815260cd60205260409020546001600160a01b0316156102b857600080fd5b604080518082018252338082526000602080840182815283835260cd825291859020935184546001600160a01b0319166001600160a01b0390911617845590516001909301929092558251428152925190927f07e6fac70d6958b8515f69f22e83196b98850a5a0891eb226df124f7677bd81592908290030190a2565b6103456103406107a9565b61041e565b6103805760405162461bcd60e51b8152600401808060200182810382526030815260200180610c926030913960400191505060405180910390fd5b60995460ff166103ce576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6099805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6104016107a9565b604080516001600160a01b039092168252519081900360200190a1565b600061043160668363ffffffff6107ad16565b92915050565b60995460ff1690565b60cc546001600160a01b031681565b61045f61045a6107a9565b610814565b565b61046961062c565b6104ba576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b61050f6103406107a9565b61054a5760405162461bcd60e51b8152600401808060200182810382526030815260200180610c926030913960400191505060405180910390fd5b6105538161085c565b50565b6105616103406107a9565b61059c5760405162461bcd60e51b8152600401808060200182810382526030815260200180610c926030913960400191505060405180910390fd5b60995460ff16156105e7576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6099805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586104016107a9565b6033546001600160a01b031690565b6033546000906001600160a01b03166106436107a9565b6001600160a01b031614905090565b60cd60205260009081526040902080546001909101546001600160a01b039091169082565b600054610100900460ff168061069057506106906108a4565b8061069e575060005460ff16155b6106d95760405162461bcd60e51b815260040180806020018281038252602e815260200180610d2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610704576000805460ff1961ff0019909116610100171660011790555b61070d336108aa565b6107163361099b565b60cc80546001600160a01b0319166001600160a01b0384161790558015610743576000805461ff00191690555b5050565b61074f61062c565b6107a0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61055381610a50565b3390565b60006001600160a01b0382166107f45760405162461bcd60e51b8152600401808060200182810382526022815260200180610d096022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61082560668263ffffffff610af116565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61086d60668263ffffffff610b5816565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b303b1590565b600054610100900460ff16806108c357506108c36108a4565b806108d1575060005460ff16155b61090c5760405162461bcd60e51b815260040180806020018281038252602e815260200180610d2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610937576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610743576000805461ff00191690555050565b600054610100900460ff16806109b457506109b46108a4565b806109c2575060005460ff16155b6109fd5760405162461bcd60e51b815260040180806020018281038252602e815260200180610d2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610a28576000805460ff1961ff0019909116610100171660011790555b610a3182610bd9565b6099805460ff191690558015610743576000805461ff00191690555050565b6001600160a01b038116610a955760405162461bcd60e51b8152600401808060200182810382526026815260200180610cc26026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b610afb82826107ad565b610b365760405162461bcd60e51b8152600401808060200182810382526021815260200180610ce86021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b610b6282826107ad565b15610bb4576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600054610100900460ff1680610bf25750610bf26108a4565b80610c00575060005460ff16155b610c3b5760405162461bcd60e51b815260040180806020018281038252602e815260200180610d2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610c66576000805460ff1961ff0019909116610100171660011790555b610c6f8261041e565b610c7c57610c7c8261085c565b8015610743576000805461ff0019169055505056fe506175736572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652050617573657220726f6c654f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a7231582036061d0bb6b0de8f559266e361a7257ce214ad5dd60cc15d31956a906d6ed24364736f6c63430005110032",
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "petersburg"
  },
  "networks": {
    "3": {
      "links": {},
      "events": {},
      "address": "0x68873efB00efDF35F0a2d1B737FE42112645F6D7",
      "updated_at": 1593176568238
    },
    "1593165271478": {
      "links": {},
      "events": {},
      "address": "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe",
      "updated_at": 1593165882914
    },
    "1593166174918": {
      "links": {},
      "events": {},
      "address": "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe",
      "updated_at": 1593166247030
    },
    "1593166403996": {
      "links": {},
      "events": {},
      "address": "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe",
      "updated_at": 1593166462159
    },
    "1593167042752": {
      "links": {},
      "events": {},
      "address": "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe",
      "updated_at": 1593167155790
    },
    "1593167556178": {
      "links": {},
      "events": {},
      "address": "0xA57B8a5584442B467b4689F1144D269d096A3daF",
      "updated_at": 1593167620372
    },
    "1593167807088": {
      "links": {},
      "events": {},
      "address": "0xA57B8a5584442B467b4689F1144D269d096A3daF",
      "updated_at": 1593167844898
    },
    "1593168831338": {
      "links": {},
      "events": {},
      "address": "0xA57B8a5584442B467b4689F1144D269d096A3daF",
      "updated_at": 1593168860886
    },
    "1593172670048": {
      "links": {},
      "events": {},
      "address": "0xA57B8a5584442B467b4689F1144D269d096A3daF",
      "updated_at": 1593172702531
    },
    "1593176318900": {
      "links": {},
      "events": {},
      "address": "0xA57B8a5584442B467b4689F1144D269d096A3daF",
      "updated_at": 1593176348180
    }
  }
}
