org: superkruger
app: decentravest
service: events

provider:
  name: aws
  region: us-east-1
  memorySize: 256
  runtime: nodejs12.x
  role: LambdaRole
  environment:
    STAGE: ${opt:stage, 'dev'}
    #s3
    tradingbucket: ${self:custom.tradingbucket}
    eventbucket: ${self:custom.eventbucket}
    eventbucket_queryresults: ${self:custom.eventbucket_queryresults}
    ratingsbucket: ${self:custom.ratingsbucket}
    #infura
    INFURA_BASE_URL: ${param:INFURA_BASE_URL}
    INFURA_API_KEY: ${param:INFURA_API_KEY}
    #dydx
    DYDX_CLOSED_MARKET_URL: ${param:DYDX_CLOSED_MARKET_URL}
    #tokens
    DAI_ADDRESS: ${param:DAI_ADDRESS}
    USDC_ADDRESS: ${param:USDC_ADDRESS}
    SAI_ADDRESS: ${param:SAI_ADDRESS}
custom:
  tradingbucket: "tradingbucket-${opt:stage, 'dev'}-1"
  eventbucket: "eventbucket-${opt:stage, 'dev'}-1"
  eventbucket_queryresults: "resultbucket-${opt:stage, 'dev'}-1"
  ratingsbucket: "ratingsbucket-${opt:stage, 'dev'}-1"
  athenadb: "blockchain-events-${opt:stage, 'dev'}"
  VPC_CIDR: 10

plugins:
  - serverless-pseudo-parameters
resources:
  Resources:
    TradingBucket: ${file(./resource/S3BucketTrades.yml)}
    EventBucket: ${file(./resource/S3BucketEvents.yml)}
    AthenaBucket: ${file(./resource/S3BucketQueryResults.yml)}
    RatingsBucket: ${file(./resource/S3BucketRatings.yml)}
    LambdaRole: ${file(./resource/LambdaRole.yml)}
    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}
    ServerlessSubnetC: ${file(./resource/ServerlessSubnetC.yml)}
    ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}
    ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}
    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
    RoutePublic: ${file(./resource/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./resource/RouteTableAssociationSubnetB.yml)}
    RouteTableAssociationSubnetC: ${file(./resource/RouteTableAssociationSubnetC.yml)}

    AthenaDB: ${file(./resource/AthenaDB.yml)}
    AthenaTableTraderPairedAllocate: ${file(./resource/tables/traderpaired/Allocate.yml)}
    AthenaTableTraderPairedApproveExit: ${file(./resource/tables/traderpaired/ApproveExit.yml)}
    AthenaTableTraderPairedInvest: ${file(./resource/tables/traderpaired/Invest.yml)}
    AthenaTableTraderPairedInvestment: ${file(./resource/tables/traderpaired/Investment.yml)}
    AthenaTableTraderPairedInvestor: ${file(./resource/tables/traderpaired/Investor.yml)}
    AthenaTableTraderPairedProfitPercentages: ${file(./resource/tables/traderpaired/ProfitPercentages.yml)}
    AthenaTableTraderPairedRejectExit: ${file(./resource/tables/traderpaired/RejectExit.yml)}
    AthenaTableTraderPairedRequestExit: ${file(./resource/tables/traderpaired/RequestExit.yml)}
    AthenaTableTraderPairedStop: ${file(./resource/tables/traderpaired/Stop.yml)}
    AthenaTableTraderPairedTrader: ${file(./resource/tables/traderpaired/Trader.yml)}

    AthenaTableMultiSigFundWalletFactoryContractInstantiation: ${file(./resource/tables/multisigfundwalletfactory/ContractInstantiation.yml)}

    AthenaTableMultiSigFundWalletDisbursementCompleted: ${file(./resource/tables/multisigfundwallet/DisbursementCompleted.yml)}
    AthenaTableMultiSigFundWalletDisbursementCreated: ${file(./resource/tables/multisigfundwallet/DisbursementCreated.yml)}
    AthenaTableMultiSigFundWalletDisbursementRejected: ${file(./resource/tables/multisigfundwallet/DisbursementRejected.yml)}
    AthenaTableMultiSigFundWalletFund: ${file(./resource/tables/multisigfundwallet/Fund.yml)}
    AthenaTableMultiSigFundWalletPayout: ${file(./resource/tables/multisigfundwallet/Payout.yml)}
    AthenaTableMultiSigFundWalletSetTrader: ${file(./resource/tables/multisigfundwallet/SetTrader.yml)}
    AthenaTableMultiSigFundWalletStopped: ${file(./resource/tables/multisigfundwallet/Stopped.yml)}

    AthenaTableDydxPosition: ${file(./resource/tables/dydx/Position.yml)}

functions:
  processEvents:
    handler: handler.processEvents
    events:
      - schedule: rate(1 day)

  processPositions:
    handler: handler.processTrades
    events:
      - schedule: rate(1 day)

  calculateRatings:
    handler: handler.calculateRatings
    events:
      - schedule: rate(1 day)

  getRatings:
    handler: handler.ratings
    events:
      - http:
          path: ratings
          method: get
          cors: true

  listTraderpairedTrader:
    handler: traderpaired/trader.webList
    events:
      - http:
          path: traderpaired/trader
          method: get
          cors: true
    
