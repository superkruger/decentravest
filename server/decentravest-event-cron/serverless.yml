org: superkruger
app: decentravest
service: events

provider:
  name: aws
  region: us-east-1
  memorySize: 256
  runtime: nodejs12.x
  role: LambdaRole
  environment:
    STAGE: ${opt:stage, 'dev'}
    #s3
    eventbucket: ${self:custom.eventbucket}
    eventbucket_queryresults: ${self:custom.eventbucket_queryresults}
    #aurora
    #AURORA_HOST: ${self:custom.AURORA.HOST}
    #AURORA_PORT: ${self:custom.AURORA.PORT}
    #common
    #DB_NAME: ${self:custom.DB_NAME}
    #USERNAME: ${self:custom.USERNAME}
    #PASSWORD: ${self:custom.PASSWORD}
    #infura
    INFURA_BASE_URL: "mainnet"
    INFURA_API_KEY: eccafe76d3bc4be4a50ae103de260444
    #dydx
    DYDX_CLOSED_MARKET_URL: https://api.dydx.exchange/v1/positions?status=CLOSED&market=$1&owner=$2
custom:
  eventbucket: "eventbucket-${opt:stage, 'dev'}-1"
  eventbucket_queryresults: "resultbucket-${opt:stage, 'dev'}-1"
  #DB_NAME: decentravest
  #USERNAME: master
  #PASSWORD: password
  AURORA:
  #  HOST:
  #    Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
  #  PORT:
  #    Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    VPC_CIDR: 10

plugins:
  - serverless-pseudo-parameters
resources:
  Resources:
    EventBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.eventbucket}
    AthenaBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.eventbucket_queryresults}
    LambdaRole: ${file(./resource/LambdaRole.yml)}
    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}
    ServerlessSubnetC: ${file(./resource/ServerlessSubnetC.yml)}
    ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}
    ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}
    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
    RoutePublic: ${file(./resource/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./resource/RouteTableAssociationSubnetB.yml)}
    RouteTableAssociationSubnetC: ${file(./resource/RouteTableAssociationSubnetC.yml)}

    #AuroraRDSClusterParameter: ${file(./resource/AuroraRDSClusterParameter.yml)}
    #AuroraRDSInstanceParameter: ${file(./resource/AuroraRDSInstanceParameter.yml)}
    #AuroraRDSCluster: ${file(./resource/AuroraRDSCluster.yml)}
    #AuroraRDSInstance: ${file(./resource/AuroraRDSInstance.yml)}

    AthenaDB: ${file(./resource/AthenaDB.yml)}
    #AthenaTableTraderPairedInvestor: ${file(./resource/AthenaTableTraderPairedInvestor.yml)}

    AthenaTableTraderPairedAllocate: ${file(./resource/tables/traderpaired/Allocate.yml)}
    AthenaTableTraderPairedApproveExit: ${file(./resource/tables/traderpaired/ApproveExit.yml)}
    AthenaTableTraderPairedInvest: ${file(./resource/tables/traderpaired/Invest.yml)}
    AthenaTableTraderPairedInvestment: ${file(./resource/tables/traderpaired/Investment.yml)}
    AthenaTableTraderPairedInvestor: ${file(./resource/tables/traderpaired/Investor.yml)}
    AthenaTableTraderPairedProfitPercentages: ${file(./resource/tables/traderpaired/ProfitPercentages.yml)}
    AthenaTableTraderPairedRejectExit: ${file(./resource/tables/traderpaired/RejectExit.yml)}
    AthenaTableTraderPairedStop: ${file(./resource/tables/traderpaired/Stop.yml)}
    AthenaTableTraderPairedTrader: ${file(./resource/tables/traderpaired/Trader.yml)}

    AthenaTableMultiSigFundWalletFactoryContractInstantiation: ${file(./resource/tables/multisigfundwalletfactory/ContractInstantiation.yml)}

    AthenaTableMultiSigFundWalletDisbursementCompleted: ${file(./resource/tables/multisigfundwallet/DisbursementCompleted.yml)}
    AthenaTableMultiSigFundWalletDisbursementCreated: ${file(./resource/tables/multisigfundwallet/DisbursementCreated.yml)}
    AthenaTableMultiSigFundWalletDisbursementRejected: ${file(./resource/tables/multisigfundwallet/DisbursementRejected.yml)}
    AthenaTableMultiSigFundWalletFund: ${file(./resource/tables/multisigfundwallet/Fund.yml)}
    AthenaTableMultiSigFundWalletPayout: ${file(./resource/tables/multisigfundwallet/Payout.yml)}
    AthenaTableMultiSigFundWalletSetTrader: ${file(./resource/tables/multisigfundwallet/SetTrader.yml)}
    AthenaTableMultiSigFundWalletStopped: ${file(./resource/tables/multisigfundwallet/Stopped.yml)}

    AthenaTableDydxPosition: ${file(./resource/tables/dydx/Position.yml)}

functions:
  processEvents:
    handler: handler.processEvents
    events:
      - schedule: rate(1 day)

  processPositions:
    handler: handler.processPositions
    events:
      - schedule: rate(1 day)

  queryEvents:
    handler: handler.queryEvents
    events:
      - schedule: rate(1 day)

  listTraderpairedTrader:
    handler: traderpaired/trader.webList
    events:
      - http:
          path: traderpaired/trader
          method: get
          cors: true
    
