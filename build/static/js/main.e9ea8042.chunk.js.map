{"version":3,"sources":["components/Header.js","components/Footer.js","components/Intro.js","store/actions.js","store/interactions.js","helpers.js","store/selectors.js","components/App.js","store/reducers.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["Header","className","src","process","alt","Component","connect","state","Footer","Container","Row","Col","sm","href","target","rel","Intro","playsInline","poster","web3AccountLoaded","account","type","traderLoaded","trader","investorLoaded","investor","loadWeb3","dispatch","web3","Web3","window","givenProvider","eth","handleRevert","connection","loadAccount","a","getAccounts","accounts","loadCrowdvest","networkId","Contract","TraderPaired","abi","networks","address","crowdvest","methods","traders","call","investors","id","contract","console","log","formatEtherBalance","balance","wei","dividedBy","BigNumber","exponentiatedBy","weiToEther","toString","Math","round","times","toNumber","accountSelector","createSelector","get","web3Selector","w","crowdvestLoadedSelector","el","crowdvestSelector","e","traderSelector","investorSelector","decorateTraderPositions","positions","undefined","sort","b","createdAt","map","position","decorateTraderPosition","formattedCreatedAt","format","profit","decoratePositionProfit","amount","formattedAmount","status","firstAction","standardActions","find","lastAction","transferAmount","minus","profitClass","App","this","loadBlockchainData","props","ethereum","enable","on","document","location","reload","net","getNetworkType","getId","crowdvestLoaded","joined","rootReducer","combineReducers","action","loaded","traderpositions","data","findIndex","uuid","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Boolean","hostname","match","preloadedState","ReactDOM","render","store","createStore","applyMiddleware","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9ea8042.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n        \t<div className=\"logo\">\n            \t<img src={`${process.env.PUBLIC_URL}/android-chrome-192x192.png`} alt=\"\"/>\n            \t<h3>Decentravest</h3>\n          \t</div>\n\t\t\t<div className=\"header-right\">\n\t\t\t</div>\n\t\t</div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n  }\n}\n\nexport default connect(mapStateToProps)(Header)\n\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nimport 'font-awesome/css/font-awesome.min.css';\n\nclass Footer extends Component {\n\n  render() {\n    return (\n      <div>\n        <div className=\"footer\">\n          <br/>\n          <Container>\n            <Row>\n              <Col sm={6}>\n                Â© 2020 Decentravest - All Rights Reserved\n              </Col>\n              <Col sm={6}>\n                <a href=\"https://twitter.com/decentravest\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <i className=\"fa fa-twitter\"></i>\n                </a>\n              </Col>\n            </Row>\n          </Container>\n          <br/>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n  }\n}\n\nexport default connect(mapStateToProps)(Footer)\n\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { Player } from 'video-react'\n\nclass Intro extends Component {\n\n  render() {\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col sm={12}>\n              <div className=\"card bg-light text-dark\">\n                \n                <div className=\"card-body\">\n                  <Player\n                    playsInline\n                    poster={`${process.env.PUBLIC_URL}/img/explainer.png`}\n                    src={`${process.env.PUBLIC_URL}/vid/explainer.mp4`}\n                  />\n                </div>\n                <div className=\"card-footer badge\">\n                  We're launching in phases, see below for a timeline\n                </div>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col sm={12}>\n              <div className=\"tl\">\n                <div className=\"tl-container tl-left\">\n                  <div className=\"tl-content\">\n                    <h2>First batch of traders</h2>\n                    <p>\n                      <em>(launching soon!!)</em><br/>\n                      Are you a successful trader on <a href=\"https://dydx.exchange/\" target=\"_blank\" rel=\"noopener\">dydx.exchange</a>?<br/>\n                      Would you like to trade risk-free?<br/><br/>\n                      Sign up below with your Metamask wallet that you use for trading, and you'll be entered into the pool.<br/><br/>\n                      <em>For the first batch, we'll waive all platform fees for the duration of the first investment phase!!</em>\n                    </p>\n                  </div>\n                </div>\n                <div className=\"tl-container tl-right\">\n                  <div className=\"tl-content\">\n                    <h2>Trader selection</h2>\n                    <p>We'll select the best traders from the pool to partake in the first opening phase.</p>\n                  </div>\n                </div>\n                <div className=\"tl-container tl-left\">\n                  <div className=\"tl-content\">\n                    <h2>First batch of investors</h2>\n                    <p>\n                      Each of the selected traders will have a limited number of slots available for investors.<br/><br/>\n                      Investors will need some minimum amount to invest, and this first investment phase will continue until we're satisfied everything works properly.\n                    </p>\n                  </div>\n                </div>\n                <div className=\"tl-container tl-right\">\n                  <div className=\"tl-content\">\n                    <h2>Open season</h2>\n                    <p>We'll open the platform to all traders and investors.</p>\n                  </div>\n                </div>\n              </div>\n            </Col>\n          </Row>\n\n        </Container>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n  }\n}\n\nexport default connect(mapStateToProps)(Intro)\n","export function web3Loaded(connection) {\n\treturn {\n\t\ttype: 'WEB3_LOADED',\n\t\tconnection\n\t}\n}\n\nexport function web3AccountLoaded(account) {\n\treturn {\n\t\ttype: 'WEB3_ACCOUNT_LOADED',\n\t\taccount\n\t}\n}\n\nexport function crowdvestLoaded(contract) {\n\treturn {\n\t\ttype: 'CROWDVEST_LOADED',\n\t\tcontract\n\t}\n}\n\nexport function traderLoaded(trader) {\n\treturn {\n\t\ttype: 'TRADER_LOADED',\n\t\ttrader\n\t}\n}\n\nexport function investorLoaded(investor) {\n\treturn {\n\t\ttype: 'INVESTOR_LOADED',\n\t\tinvestor\n\t}\n}\n\n// export function projectsLoaded(projects) {\n// \treturn {\n// \t\ttype: 'PROJECTS_LOADED',\n// \t\tprojects\n// \t}\n// }\n\n// export function projectStarted(project) {\n// \treturn {\n// \t\ttype: 'PROJECT_STARTED',\n// \t\tproject\n// \t}\n// }\n\n// export function fundingReceived(funding) {\n// \treturn {\n// \t\ttype: 'FUNDING_RECEIVED',\n// \t\tfunding\n// \t}\n// }\n\n// export function creatorPaid(creator) {\n// \treturn {\n// \t\ttype: 'CREATOR_PAID',\n// \t\tcreator\n// \t}\n// }\n","import Web3 from 'web3'\nimport TraderPaired from '../abis/TraderPaired.json'\nimport { \n\tweb3Loaded,\n\tweb3AccountLoaded,\n\tcrowdvestLoaded,\n\ttraderLoaded,\n\tinvestorLoaded\n} from './actions.js'\n\nexport const loadWeb3 = (dispatch) => {\n\tlet web3 = new Web3(window['ethereum'] || Web3.givenProvider || 'http://127.0.0.1:8545')\n\tweb3.eth.handleRevert = true\n\tdispatch(web3Loaded(web3))\n\treturn web3\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n\tconst accounts = await web3.eth.getAccounts()\n\tconst account = accounts[0]\n\tdispatch(web3AccountLoaded(account))\n\treturn account\n}\n\nexport const loadCrowdvest = async (account, web3, networkId, dispatch) => {\n\ttry {\n\t\tconst crowdvest = await new web3.eth.Contract(TraderPaired.abi, TraderPaired.networks[networkId].address, {handleRevert: true})\n\n\t\tconst trader = await crowdvest.methods.traders(account).call()\n\t\tconst investor = await crowdvest.methods.investors(account).call()\n\n\t\tif (trader.id !== 0) {\n\t\t\tdispatch(traderLoaded(trader))\n\t\t}\n\t\tif (investor.id !== 0) {\n\t\t\tdispatch(investorLoaded(investor))\n\t\t}\n\n\t\tdispatch(crowdvestLoaded(crowdvest))\n\t\treturn crowdvest\n\t} catch (error) {\n\t\tconsole.log('Contract not deployed to the current network', error)\n\t\treturn null\n\t}\n}\n\nexport const joinAsTrader = async (account, crowdvest, dispatch) => {\n\ttry {\n\t\tcrowdvest.methods.joinAsTrader(8000).send({from: account})\n\t\t.on('transactionHash', (hash) => {\n\t\t})\n\t\t.on('error', (error) => {\n\t\t\tconsole.log('Could not joinAsTrader', error)\n\t\t})\n\t} catch (error) {\n\t\tconsole.log('Could not joinAsTrader', error)\n\t\treturn null\n\t}\n}\n\nexport const joinAsInvestor = async (account, crowdvest, dispatch) => {\n\ttry {\n\t\tcrowdvest.methods.joinAsInvestor().send({from: account})\n\t\t.on('transactionHash', (hash) => {\n\t\t})\n\t\t.on('error', (error) => {\n\t\t\tconsole.log('Could not joinAsInvestor', error)\n\t\t})\n\t} catch (error) {\n\t\tconsole.log('Could not joinAsInvestor', error)\n\t\treturn null\n\t}\n}\n\n// export const subscribeToCrowdVestEvents = async (crowdsale, dispatch) => {\n// \tcrowdsale.events.ProjectStarted({}, (error, event) => {\n// \t\tdispatch(projectStarted(event.returnValues))\n// \t})\n// }\n\n// export const subscribeToProjectEvents = async (project, account, crowdsale, web3, dispatch) => {\n// \tproject.events.FundingReceived({}, (error, event) => {\n// \t\tdispatch(fundingReceived(event.returnValues))\n// \t})\n// \tproject.events.CreatorPaid({}, (error, event) => {\n// \t\tdispatch(creatorPaid(event.returnValues))\n// \t})\n// }","import BigNumber from 'bignumber.js'\n\nexport const GREEN = 'success'\nexport const RED = 'danger'\nexport const NEUTRAL = 'info'\n\nexport const weiToEther = (wei) => {\n\tif (wei) {\n\t\treturn wei.dividedBy(new BigNumber(10).exponentiatedBy(18))\n\t}\n}\n\nexport const etherToWei = (e) => {\n\tif (e) {\n\t\te = new BigNumber(e)\n\t\treturn e.times(new BigNumber(10).exponentiatedBy(18))\n\t}\n}\n\nexport const formatEtherBalance = (balance) => {\n\tconst precision = 100\n\tbalance = weiToEther(balance)\n\tconsole.log('balance', balance.toString())\n\tconst formatted = Math.round(balance.times(precision).toNumber()) / precision\n\treturn formatted\n}\n","import { get } from 'lodash'\nimport { createSelector } from 'reselect'\nimport { NEUTRAL, formatEtherBalance } from '../helpers'\n\nconst account = (state) => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, w => w)\n\nconst crowdvestLoaded = state => get(state, 'crowdvest.loaded', false)\nexport const crowdvestLoadedSelector = createSelector(crowdvestLoaded, el => el)\n\nconst crowdvest = state => get(state, 'crowdvest.contract')\nexport const crowdvestSelector = createSelector(crowdvest, e => e)\n\nconst trader = state => get(state, 'crowdvest.trader')\nexport const traderSelector = createSelector(trader, e => e)\n\nconst investor = state => get(state, 'crowdvest.investor')\nexport const investorSelector = createSelector(investor, e => e)\n\nconst traderPositionsLoaded = state => get(state, 'crowdvest.traderpositions.loaded', false)\nexport const traderPositionsLoadedSelector = createSelector(traderPositionsLoaded, e => e)\n\nconst traderPositions = state => get(state, 'crowdvest.traderpositions.data')\nexport const traderPositionsSelector = createSelector(traderPositions, (positions) => {\n\tconsole.log('Positions', positions)\n\tif (positions !== undefined) {\n\t\tpositions = positions.sort((a, b) => b.createdAt - a.createdAt)\n\t\tpositions = decorateTraderPositions(positions)\n\t}\n\treturn positions\n})\n\nconst decorateTraderPositions = (positions) => {\n\treturn positions.map((position) => {\n\t\tposition = decorateTraderPosition(position)\n\t\treturn position\n\t})\n}\n\nconst decorateTraderPosition = (position) => {\n\n\treturn ({\n\t\t...position,\n\t\tformattedCreatedAt: position.createdAt.format('hh:mm:ss D-M-Y'),\n\t\tprofit: decoratePositionProfit(position)\n\t})\n}\n\nconst decoratePositionProfit = (position) => {\n\tlet amount\n\tlet profitClass = NEUTRAL\n\tlet formattedAmount = 0\n\n\tif (position.status === 'CLOSED') {\n\t\tlet firstAction = position.standardActions.find(a => a.type === 'ISOLATED_OPEN')\n\t\tlet lastAction = position.standardActions.find(a => a.type === 'ISOLATED_FULL_CLOSE' || a.type === 'WITHDRAW')\n\t\tif (firstAction !== undefined && lastAction !== undefined) {\n\t\t\t\n\t\t\t\n\t\t\tamount = lastAction.transferAmount.minus(firstAction.transferAmount)\n\n\n\t\t\tformattedAmount = formatEtherBalance(amount)\n\t\t}\n\t}\n\n\treturn ({\n\t\tamount: amount,\n\t\tformattedAmount: formattedAmount,\n\t\tprofitClass: profitClass\n\t})\n}\n\n// // Projects\n// const projectsLoaded = state => get(state, 'crowdsale.projects.loaded', false)\n// export const projectsLoadedSelector = createSelector(projectsLoaded, l => l)\n\n// const projects = state => get(state, 'crowdsale.projects.data', [])\n// export const projectsSelector = createSelector(\n// \tprojects,\n// \t(projects) => {\n// \t\tprojects = decorateProjects(projects)\n\n// \t\t// sort descending for display\n// \t\tprojects = projects.sort((a, b) => b.deadline - a.deadline)\n// \t\treturn projects\n// \t}\n// )\n\n// const decorateProjects = (projects) => {\n// \treturn projects.map((project) => {\n// \t\tproject = decorateProject(project)\n// \t\treturn project\n// \t})\n// }\n\n// const decorateProject = (project) => {\n// \treturn ({\n// \t\t...project,\n// \t\tformattedTimestamp: moment.unix(project.deadline).format('hh:mm:ss D/M/Y')\n// \t})\n// }","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Header from './Header'\nimport Footer from './Footer'\nimport Intro from './Intro'\n// import Join from './Join'\n// import Trader from './Trader'\n// import Investor from './Investor'\nimport './App.css'\nimport { \n  loadWeb3, \n  loadAccount,\n  loadCrowdvest\n} from '../store/interactions'\nimport { \n  web3Selector,\n  accountSelector, \n  crowdvestSelector,\n  crowdvestLoadedSelector,\n  traderSelector,\n  investorSelector\n} from '../store/selectors'\nimport { web3AccountLoaded } from '../store/actions'\n\nclass App extends Component {\n  componentWillMount() {\n    this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    const web3 = loadWeb3(dispatch)\n    if (window.ethereum !== undefined) {\n      await window.ethereum.enable();\n\n      window.ethereum.on('accountsChanged', function (accounts) {\n        dispatch(web3AccountLoaded(accounts[0]))\n      })\n\n      window.ethereum.on('chainChanged', () => {\n        document.location.reload()\n      })\n    }\n    \n    await web3.eth.net.getNetworkType()\n    const networkId = await web3.eth.net.getId()\n    const account = await loadAccount(web3, dispatch)\n    \n    const crowdvest = await loadCrowdvest(account, web3, networkId, dispatch)\n    if(!crowdvest) {\n      console.log('Smart contract not detected on the current network. Please select another network with Metamask.')\n      return\n    }\n  }\n\n  render() {\n              // { !this.props.crowdvestLoaded ? \n          //   <div>connect Metamask</div> : \n            \n          //     this.props.joined ?\n              \n          //       this.props.trader ?\n          //       <Trader /> :\n          //       <Investor />\n          //      :\n          //     <Join />\n            \n          // }\n    return (\n      <div className=\"content\">\n        <Header />\n        <Intro />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const trader = traderSelector(state)\n  const investor = investorSelector(state)\n  return {\n    web3: web3Selector(state),\n    account: accountSelector(state),\n    crowdvest: crowdvestSelector(state),\n    crowdvestLoaded: crowdvestLoadedSelector(state),\n    joined: trader || investor,\n    trader: trader,\n    investor: investor\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux'\n\nfunction web3 (state = {}, action ) {\n\tswitch (action.type) {\n\t\tcase 'WEB3_LOADED':\n\t\t\treturn { ...state, connection: action.connection }\n\t\tcase 'WEB3_ACCOUNT_LOADED':\n\t\t\treturn { ...state, account: action.account }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nfunction crowdvest (state = {}, action ) {\n\tswitch (action.type) {\n\t\tcase 'CROWDVEST_LOADED':\n\t\t\treturn { ...state, loaded: true, contract: action.contract }\n\t\tcase 'TRADER_LOADED':\n\t\t\treturn { ...state, trader: action.trader }\n\t\tcase 'INVESTOR_LOADED':\n\t\t\treturn { ...state, investor: action.investor }\n\t\tcase 'TRADER_POSITIONS_LOADED':\n\t\t\treturn { ...state, traderpositions: {...state.traderpositions, loaded: true}} \n\t\tcase 'TRADER_POSITION_LOADED':\n\t\t\t// prevent duplicates\n\t\t\tlet index, data\n\t\t\tif (state.traderpositions === undefined) {\n\t\t\t\tstate.traderpositions = {loaded: false, data: []}\n\t\t\t}\n\t\t\tindex = state.traderpositions.data.findIndex(position => position.uuid === action.position.uuid)\n\t\t\tif (index === -1) {\n\t\t\t\tdata = [...state.traderpositions.data, action.position]\n\t\t\t} else {\n\t\t\t\tdata = state.traderpositions.data\n\t\t\t}\n\t\t\treturn { \n\t\t\t\t...state, \n\t\t\t\ttraderpositions: {\n\t\t\t\t\t...state.traderpositions,\n\t\t\t\t\tloaded: false,\n\t\t\t\t\tdata\n\t\t\t\t}} \n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n// function project (state = {}, action ) {\n// \tswitch (action.type) {\n// \t\tcase 'FUNDING_RECEIVED':\n// \t\t\treturn { ...state, funding: action.funding }\n// \t\tcase 'CREATOR_PAID':\n// \t\t\treturn { ...state, creator: action.creator }\n// \t\tdefault:\n// \t\t\treturn state\n// \t}\n// }\n\nconst rootReducer = combineReducers({\n\tweb3,\n\tcrowdvest\n})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\n\nconst loggerMiddleware = createLogger()\nconst middleware = []\n\n// for reduc devtools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default function configureStore ( preloadedState ) {\n\treturn createStore (\n\t\trootReducer,\n\t\tpreloadedState,\n\t\tcomposeEnhancers (applyMiddleware (...middleware, loggerMiddleware))\n\t)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport App from './components/App';\nimport configureStore from './store/configureStore'\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(\n  <Provider store = {configureStore()}>\n\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t<App />\n\t\t</Router>\n\t</Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}